/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>

/ {
  chosen: chosen {
    zmk,kscan = &kscan0;
    zmk,matrix_transform = &five_column_transform;
  };

  default_transform: keymap_transform_0 {
    compatible = "zmk,matrix-transform";
    columns = <12>;
    rows = <4>;
    map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)                                       RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)                                       RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)                                       RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
                                       RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10)
    >;
  };

  five_column_transform: keymap_transform_1 {
    compatible = "zmk,matrix-transform";
    columns = <10>;
    rows = <4>;
    map = <
        RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)                                       RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10)
        RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)                                       RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10)
        RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)                                       RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10)
                               RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10)
    >;
  };

  kscan0: kscan {
    compatible = "zmk,kscan-gpio-matrix";
    wakeup-source;

    diode-direction = "col2row";
    row-gpios
      = <&pro_micro 7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 8 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 9 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      ;

  };
};

&pinctrl {
  spi1_default: spi1_default {
    group1 {
      psels = <NRF_PSEL(SPIM_SCK, 0, 20)>,
        <NRF_PSEL(SPIM_MOSI, 0, 17)>,
        <NRF_PSEL(SPIM_MISO, 0, 25)>;
    };
  };

  spi1_sleep: spi1_sleep {
    group1 {
      psels = <NRF_PSEL(SPIM_SCK, 0, 20)>,
        <NRF_PSEL(SPIM_MOSI, 0, 17)>,
        <NRF_PSEL(SPIM_MISO, 0, 25)>;
      low-power-enable;
    };
  };

  spi3_default: spi3_default {
    group1 {
      psels = <NRF_PSEL(SPIM_MOSI, 0, 6)>;
    };
  };

  spi3_sleep: spi3_sleep {
    group1 {
      psels = <NRF_PSEL(SPIM_MOSI, 0, 6)>;
      low-power-enable;
    };
  };
  
  i2c0_default: i2c0_default {
    group1 {
      psels = <NRF_PSEL(TWIM_SDA, 1, 0)>,
          <NRF_PSEL(TWIM_SCL, 0, 24)>;
    };
  };

  i2c0_sleep: i2c0_sleep {
    group1 {
      psels = <NRF_PSEL(TWIM_SDA, 1, 0)>,
          <NRF_PSEL(TWIM_SCL, 0, 24)>;
      low-power-enable;
    };
  };
};

nice_view_spi: &spi1 {
  compatible = "nordic,nrf-spim";
  pinctrl-0 = <&spi1_default>;
  pinctrl-1 = <&spi1_sleep>;
  pinctrl-names = "default", "sleep";
  cs-gpios = <&gpio0 22 GPIO_ACTIVE_HIGH>;

  nice_view: ls0xx@0 {
    compatible = "sharp,ls0xx";
    spi-max-frequency = <1000000>;
    reg = <0>;
    width = <160>;
    height = <68>;
  };
};

/{
    split_inputs {
        #address-cells = <1>;
        #size-cells = <0>;

        glidepoint_split: glidepoint_split@0 {
            compatible = "zmk,input-split";
            reg = <0>;
        };
    };

    glide_point_listener: glidepoint_listener {
        compatible = "zmk,input-listener",
        status = "disabled",
        device = <&glidepoint_split>;
    };
};

